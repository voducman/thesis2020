#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app     = require('../app');
const fs      = require('fs');
const debug   = require('debug')('thesis:server');
const http    = require('http');
const https   = require('https');
const socket  = require('socket.io');

const {caculateHashKeyWithNonce} = require('../encrypt');
const {encryptionWithAES256}     = require('../encrypt');
const {decryptionWithAES256}     = require('../encrypt');
const DeviceKey = require('../models/DeviceKey');


const StatusKeyExchange = {
  NotFound: -1,
  Ok: 0,
  Error: 1,
  TimeOut: 2
}

let options;
/**
 * Get port from environment and store in Express.
 */

var port;
if (process.env.ENV === 'dev'){
  port = normalizePort(process.env.PORT_DEV || '3000');
}else{
  port = normalizePort(process.env.PORT_PRO || '443');
  options = {
    key:  fs.readFileSync('/etc/letsencrypt/live/lightscada.com/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/lightscada.com/fullchain.pem')
  }
}

app.set('port', port);

/**
 * Create HTTP server.
 */
var server;
if (process.env.ENV === 'dev'){
  server = http.createServer(app);
}else{
  server = https.createServer(options, app);
}



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Create socket.io listener
 */
function getRoomId(socket){
  for (let roomId in socket.rooms){
    if (socket.id !== roomId) {
      return roomId;
    }
  }
}

const io = socket(server);

io.on('connection', function(socket){

  socket.on('registerRoom', function ({ roomId, isBrowser, nonce, deviceId }) {

    if (isBrowser) {
      socket.emit('registerRoom', `Register success to Room [${roomId}-browser]`);
      socket.join(roomId + '-browser');
      console.log("Client join room [" + roomId + "-browser]");
    } else {

      DeviceKey.findOne({ deviceId })
        .then(deviceKey => {
          console.log({deviceKey});
          if (deviceKey === null) {
            return socket.emit('registerRoom', { status: StatusKeyExchange.NotFound });
          }
          console.log("Join room success B0")
          let sessionKey = caculateHashKeyWithNonce(deviceKey.secretKey, nonce);
          console.log("Join room success B1")
          deviceKey.updateSessionKey(sessionKey);
          
          socket.join(roomId);
          console.log("Join room success B2")
          socket.emit('registerRoom', { status: StatusKeyExchange.Ok});
          
          return deviceKey.save();
        })
        .catch(e => {
          console.log(e);
          console.log("Key exchange get ERROR [deviceId: " + deviceId + "]");
          socket.emit('registerRoom', { status: StatusKeyExchange.Error });
        })
    }
    
  })

  socket.on('outRoom', function({roomId, isBrowser}){

    if (isBrowser){
      socket.leave(roomId + '-browser');
      socket.emit('outRoom', `You have left room [${roomId}-browser]`);
      console.log("Client leave room [" + roomId + "-browser]");
    }else{
      socket.leave(roomId);
      socket.emit('outRoom', `You have left room [${roomId}]`);
    }
    
  })

  socket.on('write', function({deviceId, updateTag}){
    let browserRoomId = getRoomId(socket);
   
    DeviceKey.findOne({ deviceId })
    .then(deviceKey => {

      if (deviceKey === null) return;
      if (!deviceKey.isSessionKeyTimeValid()) {
        return socket.emit('registerRoom', { status: StatusKeyExchange.TimeOut });
      }

      let sessionKey = deviceKey.sessionKey;
      let encryptValuesTag = encryptionWithAES256(JSON.stringify(updateTag), sessionKey)
      socket.to(browserRoomId.replace('-browser','')).broadcast.emit('write', {'gatewayId': deviceId, 'encryptTags': encryptValuesTag});
    })
    .catch(e => { console.log(e)});
    
  })


  socket.on('read', function(message){

    let deviceId = message.deviceId;
    let encryptValuesTag = message.data;
    let gatewayRoomId = getRoomId(socket);

    DeviceKey.findOne({ deviceId })
      .then(deviceKey => {

        if (deviceKey === null) return;
        if (!deviceKey.isSessionKeyTimeValid()) {
          return socket.emit('registerRoom', { status: StatusKeyExchange.TimeOut });
        }

        let sessionKey = deviceKey.sessionKey;
        let valuesTag = decryptionWithAES256(encryptValuesTag, sessionKey)

        if (!Array.isArray(JSON.parse(valuesTag))) return;
       
        socket.to(gatewayRoomId + '-browser').emit('read', JSON.parse(valuesTag));
        })
        .catch(e => { console.log(e)});
  })

  socket.on('status', function(msg){
    let gatewayRoomId = getRoomId(socket);
    
    if (gatewayRoomId){
      socket.to(gatewayRoomId + '-browser').emit('status', msg);
    }
  })

  socket.on('control', function(command){
    let browserRoomId = getRoomId(socket);

    if (browserRoomId){
      socket.to(browserRoomId.replace('-browser','')).broadcast.emit('control', command);
    }
  })

  socket.on('alarm', function(msg){
    let gatewayRoomId = getRoomId(socket);

    if (gatewayRoomId){
      socket.to(gatewayRoomId + '-browser').emit('alarm', msg);
    }
  })

  socket.on('ackAlarm', function(msg){
    let browserRoomId = getRoomId(socket);

    if (browserRoomId){
      socket.to(browserRoomId.replace('-browser','')).broadcast.emit('ackAlarm', msg);
    }
  })

  socket.on('log', function(msg){
    let gatewayRoomId = getRoomId(socket);

    if (gatewayRoomId){
      socket.to(gatewayRoomId + '-browser').emit('log', msg);
    }
  })


  socket.on('exportLog', function(msg){
    let gatewayRoomId = getRoomId(socket);

    if (gatewayRoomId){
      socket.to(gatewayRoomId + '-browser').emit('exportLog', msg);
    }
  })

})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
