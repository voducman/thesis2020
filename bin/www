#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app     = require('../app');
const debug   = require('debug')('thesis:server');
const http    = require('http');
const socket  = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Create socket.io listener
 */
const io = socket(server);
let development = io.of('/development');
let production  = io.of('/production');

development.on('connection', function(socket){
  
  socket.on('registerRoom', function(roomId){
    socket.emit('registerRoom', `Register success to Room [${roomId}]`);
    socket.join(roomId);
  })

  socket.on('outRoom', function(roomId){
    socket.leave(roomId);
    socket.emit('outRoom', `You have left room [${roomId}]`);
  })

  socket.on('write', function(updateTag){
    console.log(updateTag);
  })
})


production.on('connection', function(socket){

})

const roomId = 'ducman1998@gmail.com';
/**
 * Create Mqtt client listener
 */
let value = 0;
let startTime = Date.now();
setInterval(function(){

  if (development.adapter.rooms[roomId]){
    const data = [
      {'Bump_Speed': {
        'value': value,
        'timestamp': Date.now() - startTime,
        'status': 'ok',
      }},
      {'Bump_Pressure': {
        'value': Math.random()*20,
        'timestamp': Date.now(),
        'status': 'ok',
      }},
    ]

    development.to(roomId).emit('read', data);
  }
  value += 20;
  if (value > 1000) value = 0;
}, 500)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
