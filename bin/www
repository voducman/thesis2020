#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app     = require('../app');
const fs      = require('fs');
const debug   = require('debug')('thesis:server');
const http    = require('http');
const https   = require('https');
const socket  = require('socket.io');

const options = {
  key:  fs.readFileSync('/etc/letsencrypt/live/lightscada.com/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/lightscada.com/fullchain.pem')
}
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Create socket.io listener
 */
const io = socket(server);

io.on('connection', function(socket){

  socket.on('registerRoom', function({roomId, isBrowser}){

    if (isBrowser){
      socket.emit('registerRoom', `Register success to Room [${roomId}-browser]`);
      socket.join(roomId + '-browser');
      console.log("Client join room [" + roomId + "-browser]");
    }else{
      socket.emit('registerRoom', `Register success to Room [${roomId}]`);
      socket.join(roomId);
    }
    
  })

  socket.on('outRoom', function({roomId, isBrowser}){

    if (isBrowser){
      socket.leave(roomId + '-browser');
      socket.emit('outRoom', `You have left room [${roomId}-browser]`);
      console.log("Client leave room [" + roomId + "-browser]");
    }else{
      socket.leave(roomId);
      socket.emit('outRoom', `You have left room [${roomId}]`);
    }
    
  })

  socket.on('write', function(updateTag){
    let browserRoomId = '';
    for (let roomId in socket.rooms){
      if (socket.id !== roomId) {
        browserRoomId = roomId;
        break;
      }
    }

    socket.to(browserRoomId.replace('-browser','')).broadcast.emit('write', updateTag);
  })

  socket.on('read', function(valuesTag){
    //console.log(valuesTag);
    let gatewayRoomId;
    for (let roomId in socket.rooms){
      if (socket.id !== roomId) {
        gatewayRoomId = roomId;
        break;
      }
    }
    
    socket.to(gatewayRoomId + '-browser').emit('read', valuesTag);
  })

  socket.on('status', function(msg){
    let gatewayRoomId;
    for (let roomId in socket.rooms){
      if (socket.id !== roomId) {
        gatewayRoomId = roomId;
        break;
      }
    }

    socket.to(gatewayRoomId + '-browser').emit('status', msg);
  })

  socket.on('control', function(command){
    let browserRoomId = '';
    for (let roomId in socket.rooms){
      if (socket.id !== roomId) {
        browserRoomId = roomId;
        break;
      }
    }

    socket.to(browserRoomId.replace('-browser','')).broadcast.emit('control', command);
  })

  socket.on('alarm', function(msg){
    let gatewayRoomId;
    for (let roomId in socket.rooms){
      if (socket.id !== roomId) {
        gatewayRoomId = roomId;
        break;
      }
    }
    
    socket.to(gatewayRoomId + '-browser').emit('alarm', msg);
  })

  socket.on('ackAlarm', function(msg){
    let browserRoomId = '';
    for (let roomId in socket.rooms){
      if (socket.id !== roomId) {
        browserRoomId = roomId;
        break;
      }
    }

    socket.to(browserRoomId.replace('-browser','')).broadcast.emit('ackAlarm', msg);
  })

  socket.on('log', function(msg){
    let gatewayRoomId;
    for (let roomId in socket.rooms){
      if (socket.id !== roomId) {
        gatewayRoomId = roomId;
        break;
      }
    }
 
    socket.to(gatewayRoomId + '-browser').emit('log', msg);
  })


  socket.on('exportLog', function(msg){
    let gatewayRoomId;
    for (let roomId in socket.rooms){
      if (socket.id !== roomId) {
        gatewayRoomId = roomId;
        break;
      }
    }
    
    socket.to(gatewayRoomId + '-browser').emit('exportLog', msg);
  })

})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
