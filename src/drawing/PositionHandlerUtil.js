import htmlSymbolUtil from './htmlSymbolUtil';
import chartUtil      from './chartUtil';

class PositionHandlerUtil {

    setDrawingCursor(id){
        if (!id){
            id = '#whiteBoard';
        }
        $(id).css('cursor', 'crosshair');
    }

    resetDrawingCursor(id){
        if (!id){
            id = '#whiteBoard';
        }
        $(id).css('cursor', 'default');
    }

    setTextCursor(id){
        $(id).css('cursor', 'inherit');
    }

    setPencilCursor(id){
        $(id).css('cursor', 'url(/static/images/pencil-cursor.png), default');
    }


    /**
     * Return ralative position compared with left corner 
     * of SVG whiteboard element
     * @param {string} id - Id of SVG whiteboard element
     * @param {float} x - Current left mouse position
     * @param {float} y - Current top mouse position
     */
    getMousePosition(id, x, y){
        let pos = $(id).position();
        return {
            "x": x - pos.left,
            "y": y - pos.top
        }
    }

    /** 
     * Drawing a line by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawLineShape(wb){
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);
        $(id).mousedown((e)=>{
            let line;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            line = wb.line(firstPos.x, firstPos.y, firstPos.x, firstPos.y).draggable();
            line.stroke({ color: '#f06', width: 5, linecap: 'round' })

            $(id).mousemove((evt)=>{
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                console.debug(`X: ${pos.x} && Y: ${pos.y}`);
                line.plot(firstPos.x, firstPos.y, pos.x, pos.y);
            })
        })

        $(id).mouseup((e)=>{
            $(id).off();
            this.resetDrawingCursor(id);
        })
    }

    /** 
     * Drawing a polyline by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawPolylineShap(wb) {
        let id = `#${wb.id()}`;
        let isFirst = true, polyline;
        let polyArray = [];

        this.setDrawingCursor(id);
        $(id).click((e) => {
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(firstPos.x, firstPos.y);
            if (isFirst) {
                polyline = wb.polyline(polyArray).fill('none').stroke({ width: 5, color: '#3caea3' }).draggable();
                isFirst = false;
            } else {
                polyline.plot(polyArray);
            }
        })

        $(id).mousemove((e) => {
            if (polyArray.length == 0) return;
            let pos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(pos.x);
            polyArray.push(pos.y);
            polyline.plot(polyArray);
            polyArray.pop();
            polyArray.pop();

        })

        $(id).dblclick((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
        })
    }

    /** 
     * Drawing a ellipse by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawEllipseShape(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);

        $(id).mousedown((e)=>{
            let ellipse;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            ellipse = wb.ellipse(0, 0).move(firstPos.x, firstPos.y).fill('none').stroke({width: 5, color: '#333'});
            ellipse.draggable();
            
            $(id).mousemove((evt)=>{
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                let width = Math.abs(pos.x - firstPos.x);
                let height = Math.abs(pos.y - firstPos.y);
                ellipse.radius(width, height);
            })
        })

        $(id).mouseup((e)=>{
            $(id).off();
            this.resetDrawingCursor(id);
        })
    }

    /** 
     * Drawing a circle by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawCircleShape(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);

        $(id).mousedown((e) => {
            let circle;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            circle = wb.circle(0).move(firstPos.x, firstPos.y).fill('none').stroke({ width: 5, color: '#333' });
            circle.draggable();

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                let width  = Math.abs(pos.x - firstPos.x);
                let height = Math.abs(pos.y - firstPos.y);
                let _radius = Math.sqrt(width**2 + height**2);
                circle.radius(_radius);
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
        })
    }   




    /** 
     * Drawing a rectangle shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawRectShape(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);

        $(id).mousedown((e) => {
            let rect;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            rect = wb.rect(0, 0).move(firstPos.x, firstPos.y).fill("none").stroke({width: 5, color: '#333'}).draggable();

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                console.debug(`X: ${pos.x} && Y: ${pos.y}`);
                let width = pos.x - firstPos.x;
                let height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    rect.size(width, height);
                } else if (width < 0 && height > 0) {
                    rect.move(pos.x, firstPos.y);
                    rect.size(Math.abs(width), height);
                } else if (width < 0 && height <= 0) {
                    rect.move(pos.x, pos.y);
                    rect.size(Math.abs(width), Math.abs(height));
                } else {
                    rect.move(firstPos.x, pos.y);
                    rect.size(width, Math.abs(height));
                }


            })
        })

        $(id).mouseup(()=>{
            $(id).off();
            this.resetDrawingCursor(id);
        })
    }

    /** 
     * Drawing a polygone shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawPolygonShape(wb){
        let id = `#${wb.id()}`;
        let isFirst = true, polygon;
        let polyArray = [];

        this.setDrawingCursor(id);
        $(id).click((e) => {
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(firstPos.x, firstPos.y);
            if (isFirst) {
                polygon = wb.polygon(polyArray).fill('none').stroke({ width: 5, color: '#3caea3' }).draggable();
                isFirst = false;
            } else {
                polygon.plot(polyArray);
            }
        })

        $(id).mousemove((e) => {
            if (polyArray.length == 0) return;
            let pos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(pos.x);
            polyArray.push(pos.y);
            polygon.plot(polyArray);
            polyArray.pop();
            polyArray.pop();

        })

        $(id).dblclick((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
        })
    }

     /** 
     * Drawing a textblock shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawTextBlock(wb) {
        let id = `#${wb.id()}`;
        this.setTextCursor(id);

        $(id).mousedown((e)=>{
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let textblock = wb.text("Textblock").move(firstPos.x, firstPos.y).draggable();

            $(id).mousemove((evt)=>{
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY); 
                let height = Math.abs(pos.y - firstPos.y);
                textblock.font('size', height);
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
        })
    }

    /** 
     * Drawing a graph view shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawPencilHandler(wb){
        let id = `#${wb.id()}`;
        let polyArray = [];
        this.setPencilCursor(id);
    
        $(id).mousedown((e)=>{
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(firstPos.x, firstPos.y + 16);
            let customLine = wb.polyline(polyArray).fill('none').stroke({ width: 5, color: '#111' }).draggable();

            $(id).mousemove((evt)=>{
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY); 
                polyArray.push(pos.x, pos.y + 16);
                customLine.plot(polyArray);
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
        })

        

    }

     /** 
     * Drawing a graph view shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawGraphView(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);

        $(id).mousedown((e) => {
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let image = wb.image("/static/images/image-big.png").size(1, 1).move(firstPos.x, firstPos.y).draggable();

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                let width  = pos.x - firstPos.x;
                let height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    image.size(width, height);
                } else if (width < 0 && height > 0) {
                    image.move(pos.x, firstPos.y);
                    image.size(Math.abs(width), height);
                } else if (width < 0 && height <= 0) {
                    image.move(pos.x, pos.y);
                    image.size(Math.abs(width), Math.abs(height));
                } else {
                    image.move(firstPos.x, pos.y);
                    image.size(width, Math.abs(height));
                }
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
        })
    }






    /** 
     * Drawing a line chart by using @svd.js lib + chartjs library 
     * and mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawLineChart(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);
        let width, height;
        let lineChartPos = {
            x: null,
            y: null
        }

        $(id).mousedown((e) => {

            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let tempRect = wb.rect(0, 0).move(firstPos.x, firstPos.y).fill("#444").id("table-temp");
            tempRect.stroke({ width: 5, color: '#333' }).draggable();
            tempRect.opacity('0.3');

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                width = pos.x - firstPos.x;
                height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    tempRect.size(width, height);
                    lineChartPos = firstPos;
                } else if (width < 0 && height > 0) {
                    tempRect.move(pos.x, firstPos.y);
                    tempRect.size(Math.abs(width), height);
                    lineChartPos.x = pos.x;
                    lineChartPos.y = firstPos.y;
                } else if (width < 0 && height <= 0) {
                    tempRect.move(pos.x, pos.y);
                    tempRect.size(Math.abs(width), Math.abs(height));
                    lineChartPos = pos;
                } else {
                    tempRect.move(firstPos.x, pos.y);
                    tempRect.size(width, Math.abs(height));
                    lineChartPos.x = firstPos.x;
                    lineChartPos.y = pos.y;
                }
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
            // Draw html table and remove rect svg shape:
            // Remove rect temp
            $('#table-temp').remove();
            // Draw line chart
            let lineChart = wb.foreignObject(Math.abs(width), Math.abs(height)).move(lineChartPos.x, lineChartPos.y);

            // Create id of line chart
            let lineChartId = chartUtil.getChartId("line-chart");
            let htmlLineChart = htmlSymbolUtil.generateLineChartHtml(lineChartId);
            lineChart.add(htmlLineChart).draggable();
            chartUtil.renderLineChart(lineChartId);
        })

    }

    /** 
     * Drawing a bar chart by using @svd.js lib + chartjs library 
     * and mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawBarChart(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);
        let width, height;
        let barChartPos = {
            x: null,
            y: null
        }

        $(id).mousedown((e) => {

            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let tempRect = wb.rect(0, 0).move(firstPos.x, firstPos.y).fill("#444").id("table-temp");
            tempRect.stroke({ width: 5, color: '#333' }).draggable();
            tempRect.opacity('0.3');

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                width = pos.x - firstPos.x;
                height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    tempRect.size(width, height);
                    barChartPos = firstPos;
                } else if (width < 0 && height > 0) {
                    tempRect.move(pos.x, firstPos.y);
                    tempRect.size(Math.abs(width), height);
                    barChartPos.x = pos.x;
                    barChartPos.y = firstPos.y;
                } else if (width < 0 && height <= 0) {
                    tempRect.move(pos.x, pos.y);
                    tempRect.size(Math.abs(width), Math.abs(height));
                    barChartPos = pos;
                } else {
                    tempRect.move(firstPos.x, pos.y);
                    tempRect.size(width, Math.abs(height));
                    barChartPos.x = firstPos.x;
                    barChartPos.y = pos.y;
                }
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
            // Draw html table and remove rect svg shape:
            // Remove rect temp
            $('#table-temp').remove();
            // Draw line chart
            let barChart = wb.foreignObject(Math.abs(width), Math.abs(height)).move(barChartPos.x, barChartPos.y);

            // Create id of bar chart
            let barChartId = chartUtil.getChartId("bar-chart");
            let htmlBarChart = htmlSymbolUtil.generateBarChartHtml(barChartId);
            barChart.add(htmlBarChart).draggable();
            chartUtil.renderBarChart(barChartId);
        })

    }


    /** 
     * Drawing a pie chart by using @svd.js lib + chartjs library 
     * and mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawPieChart(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);
        let _radius;
        let pieChartPos = {
            x: null,
            y: null
        }

        $(id).mousedown((e) => {

            let circle;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            pieChartPos = firstPos;
            circle = wb.circle(0).move(firstPos.x, firstPos.y).fill('#333').id('circle-temp')
            circle.opacity(0.3).draggable();

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                let width  = Math.abs(pos.x - firstPos.x);
                let height = Math.abs(pos.y - firstPos.y);
                _radius = Math.sqrt(width**2 + height**2);
                circle.radius(_radius);
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
            // Draw html table and remove circle svg shape:
            // Remove circle temp
            $('#circle-temp').remove();

            // Draw pie chart
            let pieChart = wb.foreignObject(Math.abs(_radius*2), Math.abs(_radius*2));
            pieChart.move(pieChartPos.x - Math.abs(_radius), pieChartPos.y - Math.abs(_radius));
            let pieChartId = chartUtil.getChartId("pie-chart");
            let htmlPiechart = htmlSymbolUtil.generateBarChartHtml(pieChartId);
            pieChart.add(htmlPiechart).draggable();
            chartUtil.renderPieChart(pieChartId);
        })


    }


    /** 
     * Drawing a donut chart by using @svd.js lib + chartjs library 
     * and mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
   drawDonutChart(wb) {
    let id = `#${wb.id()}`;
    this.setDrawingCursor(id);
    let _radius;
    let donutChartPos = {
        x: null,
        y: null
    }

    $(id).mousedown((e) => {

        let circle;
        let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
        donutChartPos = firstPos;
        circle = wb.circle(0).move(firstPos.x, firstPos.y).fill('#333').id('circle-temp')
        circle.opacity(0.3).draggable();

        $(id).mousemove((evt) => {
            let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
            let width  = Math.abs(pos.x - firstPos.x);
            let height = Math.abs(pos.y - firstPos.y);
            _radius = Math.sqrt(width**2 + height**2);
            circle.radius(_radius);
        })
    })

    $(id).mouseup((e) => {
        $(id).off();
        this.resetDrawingCursor(id);
        // Draw html table and remove circle svg shape:
        // Remove circle temp
        $('#circle-temp').remove();

        // Draw pie chart
        let donutChart = wb.foreignObject(Math.abs(_radius*2), Math.abs(_radius*2));
        donutChart.move(donutChartPos.x - Math.abs(_radius), donutChartPos.y - Math.abs(_radius));
        let donutChartId = chartUtil.getChartId("donut-chart");
        let htmlDonutchart = htmlSymbolUtil.generateBarChartHtml(donutChartId);
        donutChart.add(htmlDonutchart).draggable();
        chartUtil.renderDonutChart(donutChartId);
    })


}


    /** 
    * Drawing a radial gauge chart by using @svd.js lib + chartjs library 
    * and mouse event position hanle
    * @param {object} wb - White board object generated by SVG library
   */
    drawRadialGaugeChart(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);
        let _radius;
        let gaugeChartPos = {
            x: null,
            y: null
        }

        $(id).mousedown((e) => {

            let circle;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            gaugeChartPos = firstPos;
            circle = wb.circle(0).move(firstPos.x, firstPos.y).fill('#333').id('circle-temp')
            circle.opacity(0.3).draggable();

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                let width  = Math.abs(pos.x - firstPos.x);
                let height = Math.abs(pos.y - firstPos.y);
                _radius = Math.sqrt(width**2 + height**2);
                circle.radius(_radius);
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
            // Draw html table and remove circle svg shape:
            // Remove circle temp
            $('#circle-temp').remove();
            // Draw pie chart
            let gauge = wb.foreignObject(Math.abs(_radius), Math.abs(_radius)).move(gaugeChartPos.x, gaugeChartPos.y);
            let htmlGaugechart = htmlSymbolUtil.generateBarChartHtml();
            gauge.add(htmlGaugechart).draggable();
        })


    }

    /** 
    * Drawing a linear gauge chart by using @svd.js lib + chartjs library 
    * and mouse event position hanle
    * @param {object} wb - White board object generated by SVG library
   */
    drawLinearGaugeChart(wb){
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);
        let width, height;
        let linearGaugePos = {
            x: null,
            y: null
        }

        $(id).mousedown((e) => {

            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let tempRect = wb.rect(0, 0).move(firstPos.x, firstPos.y).fill("#444").id("gauge-temp");
            tempRect.stroke({ width: 5, color: '#333' }).draggable();
            tempRect.opacity('0.3');

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                width = pos.x - firstPos.x;
                height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    tempRect.size(width, height);
                    linearGaugePos = firstPos;
                } else if (width < 0 && height > 0) {
                    tempRect.move(pos.x, firstPos.y);
                    tempRect.size(Math.abs(width), height);
                    linearGaugePos.x = pos.x;
                    linearGaugePos.y = firstPos.y;
                } else if (width < 0 && height <= 0) {
                    tempRect.move(pos.x, pos.y);
                    tempRect.size(Math.abs(width), Math.abs(height));
                    linearGaugePos = pos;
                } else {
                    tempRect.move(firstPos.x, pos.y);
                    tempRect.size(width, Math.abs(height));
                    linearGaugePos.x = firstPos.x;
                    linearGaugePos.y = pos.y;
                }
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
            // Draw html table and remove rect svg shape:
            // Remove rect temp
            $('#gauge-temp').remove();
            // Draw line chart
            let linearGauge = wb.foreignObject(Math.abs(width), Math.abs(height)).move(linearGaugePos.x, linearGaugePos.y);

            // Create id of bar chart
            let gaugeChartId = chartUtil.getChartId("bar-chart");
            let htmlgaugeChart = htmlSymbolUtil.generateBarChartHtml(gaugeChartId);
            linearGauge.add(htmlgaugeChart).draggable();
            chartUtil.renderBarChart(gaugeChartId);
        })

        
    }




























    /** 
     * Drawing a table by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawTable(wb) {
        let id = `#${wb.id()}`;
        this.setDrawingCursor(id);
        let width, height;
        let tablePos = {
            x: null,
            y: null
        }

        $(id).mousedown((e) => {

            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let tempRect = wb.rect(0, 0).move(firstPos.x, firstPos.y).fill("#444").id("table-temp");
            tempRect.stroke({width: 5, color: '#333'}).draggable();
            tempRect.opacity('0.3');

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                width = pos.x - firstPos.x;
                height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    tempRect.size(width, height);
                    tablePos = firstPos;
                } else if (width < 0 && height > 0) {
                    tempRect.move(pos.x, firstPos.y);
                    tempRect.size(Math.abs(width), height);
                    tablePos.x = pos.x;
                    tablePos.y = firstPos.y;
                } else if (width < 0 && height <= 0) {
                    tempRect.move(pos.x, pos.y);
                    tempRect.size(Math.abs(width), Math.abs(height));
                    tablePos = pos;
                } else {
                    tempRect.move(firstPos.x, pos.y);
                    tempRect.size(width, Math.abs(height));
                    tablePos.x = firstPos.x;
                    tablePos.y = pos.y;
                }
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            this.resetDrawingCursor(id);
            // Draw html table and remove rect svg shape:
            // Remove rect temp
            $('#table-temp').remove();
            // Draw table
            let table = wb.foreignObject(Math.abs(width), Math.abs(height)).move(tablePos.x, tablePos.y);
            let htmlTable = htmlSymbolUtil.generateTableHtml();
            table.add(htmlTable).draggable();

        })
    }

}

export default PositionHandlerUtil;