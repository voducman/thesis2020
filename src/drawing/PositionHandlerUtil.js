class PositionHandlerUtil {

    /**
     * Return ralative position compared with left corner 
     * of SVG whiteboard element
     * @param {string} id - Id of SVG whiteboard element
     * @param {float} x - Current left mouse position
     * @param {float} y - Current top mouse position
     */
    getMousePosition(id, x, y){
        let pos = $(id).position();
        return {
            "x": x - pos.left,
            "y": y - pos.top
        }
    }

    /** 
     * Drawing a line by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawLineShape(wb){
        let id = `#${wb.id()}`;
        $(id).mousedown((e)=>{
            let line;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            line = wb.line(firstPos.x, firstPos.y, firstPos.x, firstPos.y).draggable();
            line.stroke({ color: '#f06', width: 5, linecap: 'round' })

            $(id).mousemove((evt)=>{
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                console.debug(`X: ${pos.x} && Y: ${pos.y}`);
                line.plot(firstPos.x, firstPos.y, pos.x, pos.y);
            })
        })

        $(id).mouseup((e)=>{
            $(id).off()
        })
    }

    /** 
     * Drawing a polyline by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawPolylineShap(wb) {
        let id = `#${wb.id()}`;
        let isFirst = true, polyline;
        let polyArray = [];

        $(id).click((e) => {
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(firstPos.x, firstPos.y);
            if (isFirst) {
                polyline = wb.polyline(polyArray).fill('none').stroke({ width: 5, color: '#3caea3' }).draggable();
                isFirst = false;
            } else {
                polyline.plot(polyArray);
            }
        })

        $(id).mousemove((e) => {
            if (polyArray.length == 0) return;
            let pos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(pos.x);
            polyArray.push(pos.y);
            polyline.plot(polyArray);
            polyArray.pop();
            polyArray.pop();

        })

        $(id).dblclick((e) => {
            $(id).off();
        })
    }

    /** 
     * Drawing a ellipse by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawEllipseShape(wb) {
        let id = `#${wb.id()}`;
        $(id).mousedown((e)=>{
            let ellipse;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            ellipse = wb.ellipse(0, 0).move(firstPos.x, firstPos.y).fill('none').stroke({width: 5, color: '#333'});
            ellipse.draggable();
            
            $(id).mousemove((evt)=>{
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                let width = Math.abs(pos.x - firstPos.x);
                let height = Math.abs(pos.y - firstPos.y);
                ellipse.radius(width, height);
            })
        })

        $(id).mouseup((e)=>{
            $(id).off();
        })
    }

    /** 
     * Drawing a circle by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawCircleShape(wb) {
        let id = `#${wb.id()}`;
        $(id).mousedown((e) => {
            let circle;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            circle = wb.circle(0, 0).move(firstPos.x, firstPos.y).fill('none').stroke({ width: 5, color: '#333' });
            circle.draggable();

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                let width = Math.abs(pos.x - firstPos.x);
                let height = Math.abs(pos.y - firstPos.y);
                circle.radius(width, height);
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
        })
}




    /** 
     * Drawing a rectangle shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawRectShape(wb) {
        let id = `#${wb.id()}`;
        $(id).mousedown((e) => {
            let rect;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            rect = wb.rect(0, 0).move(firstPos.x, firstPos.y).fill("none").stroke({width: 5, color: '#333'}).draggable();

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                console.debug(`X: ${pos.x} && Y: ${pos.y}`);
                let width = pos.x - firstPos.x;
                let height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    rect.size(width, height);
                } else if (width < 0 && height > 0) {
                    rect.move(pos.x, firstPos.y);
                    rect.size(Math.abs(width), height);
                } else if (width < 0 && height <= 0) {
                    rect.move(pos.x, pos.y);
                    rect.size(Math.abs(width), Math.abs(height));
                } else {
                    rect.move(firstPos.x, pos.y);
                    rect.size(width, Math.abs(height));
                }


            })
        })

        $(id).mouseup(function () {
            $(id).off();
        })
    }

    /** 
     * Drawing a polygone shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawPolygonShape(wb){
        let id = `#${wb.id()}`;
        let isFirst = true, polygon;
        let polyArray = [];

        $(id).click((e) => {
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(firstPos.x, firstPos.y);
            if (isFirst) {
                polygon = wb.polygon(polyArray).fill('none').stroke({ width: 5, color: '#3caea3' }).draggable();
                isFirst = false;
            } else {
                polygon.plot(polyArray);
            }
        })

        $(id).mousemove((e) => {
            if (polyArray.length == 0) return;
            let pos = this.getMousePosition(id, e.pageX, e.pageY);
            polyArray.push(pos.x);
            polyArray.push(pos.y);
            polygon.plot(polyArray);
            polyArray.pop();
            polyArray.pop();

        })

        $(id).dblclick((e) => {
            $(id).off();
        })
    }

     /** 
     * Drawing a textblock shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawTextBlock(wb) {
        let id = `#${wb.id()}`;
        $(id).mousedown((e)=>{
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let textblock = wb.text("Textblock").move(firstPos.x, firstPos.y).draggable();

            $(id).mousemove((evt)=>{
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY); 
                let height = Math.abs(pos.y - firstPos.y);
                textblock.font('size', height);
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
        })
    }

     /** 
     * Drawing a graph view shape by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawGraphView(wb) {
        let id = `#${wb.id()}`;
        $(id).mousedown((e) => {
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let image = wb.image("/static/images/image-big.png").size(1, 1).move(firstPos.x, firstPos.y).draggable();

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                let width  = pos.x - firstPos.x;
                let height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    image.size(width, height);
                } else if (width < 0 && height > 0) {
                    image.move(pos.x, firstPos.y);
                    image.size(Math.abs(width), height);
                } else if (width < 0 && height <= 0) {
                    image.move(pos.x, pos.y);
                    image.size(Math.abs(width), Math.abs(height));
                } else {
                    image.move(firstPos.x, pos.y);
                    image.size(width, Math.abs(height));
                }
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
        })
    }

    /** 
     * Drawing a table by using @svd.js lib & mouse event position hanle
     * @param {object} wb - White board object generated by SVG library
    */
    drawTable(wb) {
        let id = `#${wb.id()}`;
        $(id).mousedown((e) => {
            let tablePos = {
                x: null,
                y: null
            }
            let width, height;
            let firstPos = this.getMousePosition(id, e.pageX, e.pageY);
            let tempRect = wb.rect(0, 0).move(firstPos.x, firstPos.y).fill("#444")
            tempRect.stroke({width: 5, color: '#333'}).draggable();
            tempRect.opacity('0.3');

            $(id).mousemove((evt) => {
                let pos = this.getMousePosition(id, evt.pageX, evt.pageY);
                width = pos.x - firstPos.x;
                height = pos.y - firstPos.y;

                if (width >= 0 && height >= 0) {
                    tempRect.size(width, height);
                    tablePos.x = firstPos;
                } else if (width < 0 && height > 0) {
                    tempRect.move(pos.x, firstPos.y);
                    tempRect.size(Math.abs(width), height);
                    tablePos.x = pos.x;
                    tablePos.y = firstPos.y;
                } else if (width < 0 && height <= 0) {
                    tempRect.move(pos.x, pos.y);
                    tempRect.size(Math.abs(width), Math.abs(height));
                    tablePos.x = pos;
                } else {
                    tempRect.move(firstPos.x, pos.y);
                    tempRect.size(width, Math.abs(height));
                    tablePos.x = firstPos.x;
                    tablePos.y = pos.y;
                }
            })
        })

        $(id).mouseup((e) => {
            $(id).off();
            // Draw html table and remove rect svg shape:
            // Width: $width, Height: $height;
            // Pos x: $tablePos.x, Pos y: $tablePos.y
            // TO-DO here
            tempRect.remove();

        })
    }

}

export default PositionHandlerUtil;